name: Foodgram Workflow

on:
  push:
    branches: [ master ]

jobs:
  tests:
    name: flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4 
        with:
          python-version: 3.9
      - name: Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          cd backend/
          pip install -r requirements.txt
      - name: Test
        run: |
          python -m flake8 backend

  build_and_push_backend_to_docker_hub:
    name: Pushing backend image to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest

  build_and_push_frontend_to_docker_hub:
    name: Pushing frontend image to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest


  deploy:
    name: Deploying to server
    runs-on: ubuntu-latest
    needs:
      - tests
      - build_and_push_backend_to_docker_hub
      - build_and_push_frontend_to_docker_hub
    steps:
      - name: ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
            rm .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            sudo docker-compose up -d --build
            docker-compose exec web python manage.py makemigrations users
            docker-compose exec web python manage.py migrate users
            docker-compose exec web python manage.py makemigrations
            docker-compose exec web python manage.py migrate
            docker-compose exec web python manage.py makemigrations recipes
            docker-compose exec web python manage.py migrate recipes
            docker-compose exec web python manage.py makemigrations users
            docker-compose exec web python manage.py migrate users
            docker-compose exec web python manage.py collectstatic --no-input
            docker-compose exec web python manage.py import

            ## echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='${{ secrets.ADMIN_USERNAME }}').exists() or User.objects.create_superuser('${{ secrets.ADMIN_USERNAME }}', '${{ secrets.ADMIN_USERNAME }}@admin.zz', '${{ secrets.ADMIN_PASSWORD }}')" | sudo docker-compose exec -T backend python manage.py shell
            # echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@admin.zz', '123456')" | sudo docker-compose exec -T backend python manage.py shell
            # sudo docker-compose exec backend python manage.py load_ingredients
            # sudo docker-compose exec backend python manage.py load_tags
            # sudo docker-compose exec backend python manage.py collectstatic --no-input
            # sudo docker system prune -af
            # sudo docker volume prune -f

  send_message:
    name: Sending Telegram message
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} successed!
